{"version":3,"file":"points.js","sources":["services/points.js"],"sourcesContent":["// 积分服务 - 统一管理用户积分信息\nimport { getCurrentUserFromProfile } from './login.js';\n\n// 全局积分缓存\nlet cachedUserPoints = null;\nlet lastFetchTime = 0;\n\n/**\n * 获取用户积分\n * @param {boolean} forceRefresh 是否强制刷新\n * @returns {Promise} 用户积分Promise\n */\nexport const getUserPoints = (forceRefresh = false) => {\n  return new Promise(async (resolve) => {\n    try {\n      // 使用固定的默认用户ID\n      const userId = '10086420';\n      \n      // 如果不是强制刷新，首先尝试从本地存储获取积分\n      if (!forceRefresh) {\n        try {\n          const pointsStr = uni.getStorageSync('user_points');\n          if (pointsStr) {\n            const points = parseInt(pointsStr);\n            console.log('从本地存储获取积分:', points);\n            \n            // 更新缓存\n            cachedUserPoints = { points };\n            lastFetchTime = Date.now();\n            \n            // 返回本地积分数据\n            resolve({\n              success: true,\n              data: { points },\n              source: 'local'\n            });\n            return;\n          }\n        } catch (localError) {\n          console.error('从本地存储获取积分失败:', localError);\n        }\n        \n        // 如果本地没有积分数据，但有缓存且未强制刷新且缓存时间小于30秒，直接返回缓存\n      const now = Date.now();\n      if (!forceRefresh && cachedUserPoints && (now - lastFetchTime < 30000)) {\n        console.log('使用缓存的积分数据:', cachedUserPoints);\n        resolve({\n          success: true,\n          data: cachedUserPoints,\n          cached: true\n        });\n        return;\n      }\n      }\n      \n      // 从云数据库获取积分\n      try {\n        console.log('从云端获取积分，用户ID:', userId);\n      // 调用云函数获取用户积分\n      const { result } = await uniCloud.callFunction({\n        name: 'getUserPoints',\n        data: { userId }\n      });\n\n      if (result && result.success) {\n          const cloudPoints = result.data.points || 1000;\n          console.log('从云端获取的积分:', cloudPoints);\n        \n          // 更新本地缓存\n          cachedUserPoints = { points: cloudPoints };\n          lastFetchTime = Date.now();\n          \n          // 保存到本地存储\n          try {\n            uni.setStorageSync('user_points', cloudPoints.toString());\n            console.log('云端积分已保存到本地:', cloudPoints);\n          } catch (e) {\n            console.error('保存积分到本地存储失败:', e);\n          }\n          \n          // 广播积分更新\n          uni.$emit('userPointsUpdated', { points: cloudPoints });\n            \n            resolve({\n              success: true,\n            data: { points: cloudPoints },\n            source: 'cloud'\n            });\n            return;\n        } else {\n          console.error('云函数获取积分失败:', result);\n          }\n      } catch (cloudError) {\n        console.error('调用云函数获取积分失败:', cloudError);\n        }\n        \n      // 如果云端获取失败，使用默认值\n      const defaultPoints = { points: 1000 };\n      cachedUserPoints = defaultPoints;\n      lastFetchTime = Date.now();\n      \n      // 保存默认积分到本地\n      try {\n        uni.setStorageSync('user_points', '1000');\n        console.log('默认积分已保存到本地');\n      } catch (e) {\n        console.error('保存默认积分到本地失败:', e);\n      }\n      \n      resolve({\n        success: true,\n        message: '使用默认积分',\n        data: defaultPoints\n        });\n    } catch (error) {\n      console.error('获取用户积分失败:', error);\n      const fallbackData = cachedUserPoints || { points: 1000 };\n      resolve({\n        success: false,\n        message: '获取积分失败，使用默认值',\n        data: fallbackData\n      });\n    }\n  });\n};\n\n/**\n * 更新用户积分缓存\n * @param {Object} pointsData 积分数据\n */\nexport const updatePointsCache = (pointsData) => {\n  if (pointsData && typeof pointsData.points !== 'undefined') {\n    cachedUserPoints = { ...pointsData };\n    lastFetchTime = Date.now();\n    console.log('积分缓存已更新:', cachedUserPoints);\n    \n    // 保存到本地存储，确保不同页面之间的一致性\n    try {\n      uni.setStorageSync('user_points', pointsData.points.toString());\n      console.log('积分已保存到本地存储:', pointsData.points);\n    } catch (e) {\n      console.error('保存积分到本地存储失败:', e);\n    }\n    \n    // 广播积分更新事件\n    broadcastPointsUpdate(pointsData);\n    \n    return true;\n  }\n  return false;\n};\n\n/**\n * 广播积分更新事件\n * @param {Object} pointsData 积分数据\n */\nconst broadcastPointsUpdate = (pointsData) => {\n  if (pointsData && typeof pointsData.points !== 'undefined') {\n    // 通过全局事件通知所有页面积分已更新\n    uni.$emit('userPointsUpdated', pointsData);\n    console.log('已广播积分更新事件:', pointsData);\n    \n    // 同时更新用户信息中的积分\n    try {\n      // 获取当前用户\n      const currentUser = getCurrentUserFromProfile();\n      if (currentUser) {\n        // 更新用户积分\n        const updatedUser = { \n          ...currentUser, \n          points: pointsData.points \n        };\n        \n        // 保存回存储\n        uni.setStorageSync('profileUser', JSON.stringify(updatedUser));\n        console.log('用户信息中的积分已更新:', updatedUser);\n        \n        // 通知用户信息更新\n        uni.$emit('userInfoUpdated', updatedUser);\n      }\n    } catch (error) {\n      console.error('更新用户信息中的积分失败:', error);\n    }\n  }\n};\n\n/**\n * 获取当前用户积分（同步方法）\n * @returns {number} 用户积分\n */\nexport const getCurrentPoints = () => {\n  // 首先尝试从本地存储获取积分\n  try {\n    const pointsStr = uni.getStorageSync('user_points');\n    if (pointsStr) {\n      return parseInt(pointsStr);\n    }\n  } catch (e) {\n    console.error('从本地存储获取积分失败:', e);\n  }\n  \n  // 尝试从缓存获取\n  if (cachedUserPoints && typeof cachedUserPoints.points !== 'undefined') {\n    return cachedUserPoints.points;\n  }\n  \n  // 尝试从用户信息中获取\n  try {\n    const currentUser = getCurrentUserFromProfile();\n    if (currentUser && typeof currentUser.points !== 'undefined') {\n      return currentUser.points;\n    }\n  } catch (error) {\n    console.error('从用户信息获取积分失败:', error);\n  }\n  \n  // 返回默认值\n  return 1000;\n}; "],"names":["uni","uniCloud","getCurrentUserFromProfile"],"mappings":"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"}