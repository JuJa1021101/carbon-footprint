{"version":3,"file":"userActivity.js","sources":["services/userActivity.js"],"sourcesContent":["/**\n * 用户活动相关服务\n */\nimport { getCurrentUser } from './login.js';\n\n// 存储用户报名和打卡状态的本地缓存键名\nconst USER_ACTIVITY_STATUS_KEY = 'user_activity_status';\n\n// 添加本地备用数据，在API调用失败时使用\nconst FALLBACK_ACTIVITIES = [\n  {\n    _id: 'activity1',\n    title: '城市河道清洁志愿行动',\n    description: '一起行动，清洁我们的城市河道，保护水资源',\n    location: '城东河滨公园',\n    activity_time: '6月15日 09:00',\n    status: '报名中',\n    point: 100\n  },\n  {\n    _id: 'activity2',\n    title: '废旧电池回收换礼品',\n    description: '回收旧电池，保护环境，还能换取环保小礼品',\n    location: '市民服务中心',\n    activity_time: '6月1日-30日',\n    status: '进行中',\n    point: 50\n  },\n  {\n    _id: 'activity3',\n    title: '图书馆整理书籍',\n    description: '将书按类别归纳，放在书架上。',\n    location: '东华理工大学',\n    activity_time: '2025年6月19日',\n    status: '未开始',\n    point: 80\n  }\n];\n\n/**\n * 获取所有活动列表\n * @param {Boolean} sort 是否按状态排序\n * @returns {Promise} 包含活动列表数据的Promise\n */\nexport const getActivities = (sort = true) => {\n  return new Promise((resolve, reject) => {\n    uni.showLoading({ title: '加载中...' });\n    \n    // 尝试从云函数获取数据\n    try {\n      uniCloud.callFunction({\n        name: 'getActivities',\n      }).then(res => {\n        uni.hideLoading();\n        if (res.result && res.result.code === 0) {\n          let activities = res.result.data;\n          \n          // 如果活动列表为空，使用备用数据\n          if (!activities || activities.length === 0) {\n            console.log('云函数返回的活动列表为空，使用备用数据');\n            activities = FALLBACK_ACTIVITIES;\n          }\n          \n          processActivities(activities, sort, resolve);\n        } else {\n          console.error('云函数返回异常:', res);\n          console.log('使用备用数据');\n          processActivities(FALLBACK_ACTIVITIES, sort, resolve);\n        }\n      }).catch(err => {\n        uni.hideLoading();\n        console.error('调用云函数失败:', err);\n        console.log('使用备用数据');\n        processActivities(FALLBACK_ACTIVITIES, sort, resolve);\n      });\n    } catch (error) {\n      uni.hideLoading();\n      console.error('调用云函数出现异常:', error);\n      console.log('使用备用数据');\n      processActivities(FALLBACK_ACTIVITIES, sort, resolve);\n    }\n  });\n};\n\n/**\n * 处理活动数据：排序和添加用户状态\n * @param {Array} activities 活动数据\n * @param {Boolean} sort 是否排序\n * @param {Function} resolve Promise的resolve函数\n */\nconst processActivities = (activities, sort, resolve) => {\n  // 如果需要排序，按照状态排序：进行中 > 报名中 > 未开始 > 已结束 > 已完成\n  if (sort && activities.length > 0) {\n    // 获取用户活动状态\n    const userActivityStatus = getUserActivityStatus();\n    \n    activities.sort((a, b) => {\n      // 先检查是否已完成（已打卡）\n      const aCheckedIn = userActivityStatus[a._id]?.isCheckedIn || false;\n      const bCheckedIn = userActivityStatus[b._id]?.isCheckedIn || false;\n      \n      if (aCheckedIn && !bCheckedIn) return 1; // a已完成，排在后面\n      if (!aCheckedIn && bCheckedIn) return -1; // b已完成，排在后面\n      \n      // 再检查是否已报名（进行中）\n      const aEnrolled = userActivityStatus[a._id]?.isEnrolled || false;\n      const bEnrolled = userActivityStatus[b._id]?.isEnrolled || false;\n      \n      if (aEnrolled && !bEnrolled) return -1; // a进行中，排在前面\n      if (!aEnrolled && bEnrolled) return 1; // b进行中，排在前面\n      \n      // 最后按照原始状态排序\n      const statusOrder = {\n        '进行中': 0,\n        '报名中': 1,\n        '未开始': 2,\n        '已结束': 3\n      };\n      \n      const aStatusValue = statusOrder[a.status] !== undefined ? statusOrder[a.status] : 999;\n      const bStatusValue = statusOrder[b.status] !== undefined ? statusOrder[b.status] : 999;\n      \n      return aStatusValue - bStatusValue;\n    });\n  }\n  \n  // 获取用户的活动状态并应用到活动列表\n  const userActivityStatus = getUserActivityStatus();\n  const activitiesWithStatus = activities.map(activity => {\n    const status = userActivityStatus[activity._id] || {};\n    return {\n      ...activity,\n      isEnrolled: status.isEnrolled || false,\n      isCheckedIn: status.isCheckedIn || false\n    };\n  });\n  \n  resolve(activitiesWithStatus);\n};\n\n/**\n * 获取前两个活动（首页展示用）\n * @returns {Promise} 包含前两个活动的Promise\n */\nexport const getTopActivities = () => {\n  return new Promise((resolve, reject) => {\n    console.log('开始获取首页置顶活动...');\n    // 获取活动列表并强制按状态和时间排序\n    getActivities(true)\n      .then(activities => {\n        console.log('获取到活动列表，总数:', activities.length);\n        \n        if (!activities || activities.length === 0) {\n          console.log('没有获取到活动，将使用备用数据');\n          resolve(FALLBACK_ACTIVITIES.slice(0, 2));\n          return;\n        }\n        \n        // 确保活动按正确的优先级排序\n        // 首先根据活动状态排序: 进行中 > 报名中 > 未开始 > 已结束\n        activities.sort((a, b) => {\n          // 获取状态排序优先级\n          const getStatusPriority = (activity) => {\n            if (activity.isEnrolled && !activity.isCheckedIn) return 0; // 进行中（已报名未打卡）\n            if (activity.status === '报名中') return 1; // 报名中\n            if (activity.status === '未开始') return 2; // 未开始\n            if (activity.status === '已结束') return 3; // 已结束\n            if (activity.isCheckedIn) return 4; // 已完成（已打卡）\n            return 5; // 其他\n          };\n          \n          const aPriority = getStatusPriority(a);\n          const bPriority = getStatusPriority(b);\n          \n          // 优先按状态排序\n          if (aPriority !== bPriority) {\n            return aPriority - bPriority;\n          }\n          \n          // 如果状态相同，则按活动时间排序（近期的排前面）\n          if (a.activity_time && b.activity_time) {\n            return new Date(a.activity_time) - new Date(b.activity_time);\n          }\n          \n          return 0;\n        });\n        \n        // 只返回前两个活动\n        console.log('排序后的活动顺序:', activities.map(a => `${a.title} (${a.status}${a.isEnrolled ? '/已报名' : ''}${a.isCheckedIn ? '/已打卡' : ''})`));\n        const topActivities = activities.slice(0, 2);\n        console.log('首页将显示的活动:', topActivities.map(a => a.title));\n        resolve(topActivities);\n      })\n      .catch(err => {\n        console.error('获取活动列表失败，将使用备用数据:', err);\n        resolve(FALLBACK_ACTIVITIES.slice(0, 2));\n      });\n  });\n};\n\n/**\n * 用户报名活动\n * @param {String} activityId 活动ID\n * @returns {Promise} 报名结果Promise\n */\nexport const enrollActivity = (activityId) => {\n  return new Promise((resolve, reject) => {\n    // 检查用户登录状态\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('请先登录'));\n      return;\n    }\n    \n    // 获取当前用户活动状态\n    const userActivityStatus = getUserActivityStatus();\n    \n    // 设置该活动为已报名\n    userActivityStatus[activityId] = {\n      ...(userActivityStatus[activityId] || {}),\n      isEnrolled: true,\n      enrolledAt: new Date().toISOString()\n    };\n    \n    // 保存状态\n    saveUserActivityStatus(userActivityStatus);\n    \n    // 模拟网络请求\n    setTimeout(() => {\n      resolve({ success: true });\n    }, 500);\n  });\n};\n\n/**\n * 用户打卡活动\n * @param {String} activityId 活动ID\n * @param {Number} points 活动积分\n * @returns {Promise} 打卡结果Promise\n */\nexport const checkInActivity = (activityId, points) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // 检查用户登录状态\n      const user = getCurrentUser();\n      if (!user) {\n        reject(new Error('请先登录'));\n        return;\n      }\n      \n      // 使用固定的默认用户ID\n      const userId = '10086420';\n      \n      // 获取当前用户活动状态\n      const userActivityStatus = getUserActivityStatus();\n      \n      // 检查是否已报名\n      if (!userActivityStatus[activityId]?.isEnrolled) {\n        reject(new Error('请先报名该活动'));\n        return;\n      }\n      \n      // 检查是否已打卡\n      if (userActivityStatus[activityId]?.isCheckedIn) {\n        reject(new Error('您已经完成打卡'));\n        return;\n      }\n      \n      // 设置该活动为已打卡\n      userActivityStatus[activityId] = {\n        ...userActivityStatus[activityId],\n        isCheckedIn: true,\n        checkedInAt: new Date().toISOString()\n      };\n      \n      // 保存状态\n      saveUserActivityStatus(userActivityStatus);\n      \n      // 直接调用云函数更新积分\n      console.log('开始更新积分，活动ID:', activityId, '积分:', points);\n      uni.showLoading({ title: '更新积分中...' });\n      \n      // 记录更新前的积分，以便在失败时回滚\n      let originalPoints;\n      try {\n        const pointsStr = uni.getStorageSync('user_points');\n        originalPoints = pointsStr ? parseInt(pointsStr) : 0;\n      } catch (e) {\n        console.error('获取原始积分失败:', e);\n      }\n      \n      try {\n        const { result } = await uniCloud.callFunction({\n          name: 'updateUserPoints',\n          data: {\n            userId: userId, // 使用固定的默认用户ID\n            pointsChange: points,\n            reason: `完成活动\"${activityId}\"打卡`\n          }\n        });\n        \n        uni.hideLoading();\n        \n        if (result && result.success) {\n          console.log('积分更新成功:', result);\n          \n          // 获取更新后的积分\n          const newPoints = result.data.current_points;\n          \n          // 更新本地积分缓存\n          try {\n            uni.setStorageSync('user_points', newPoints.toString());\n            console.log('本地积分已更新为:', newPoints);\n            \n            // 广播积分更新事件\n            uni.$emit('userPointsUpdated', { points: newPoints });\n          } catch (e) {\n            console.error('保存积分到本地存储失败:', e);\n          }\n          \n          resolve({ \n            success: true, \n            points: points,\n            totalPoints: newPoints\n          });\n        } else {\n          console.error('积分更新失败:', result);\n          uni.showToast({\n            title: '积分更新失败',\n            icon: 'none'\n          });\n          reject(new Error('积分更新失败'));\n        }\n      } catch (error) {\n        uni.hideLoading();\n        console.error('调用云函数更新积分失败:', error);\n        \n        // 尝试恢复原始积分\n        if (originalPoints !== undefined) {\n          try {\n            uni.setStorageSync('user_points', originalPoints.toString());\n          } catch (e) {\n            console.error('恢复原始积分失败:', e);\n          }\n        }\n        \n        uni.showToast({\n          title: '积分更新失败',\n          icon: 'none'\n        });\n        reject(new Error('积分更新失败，请稍后重试'));\n      }\n    } catch (error) {\n      uni.hideLoading();\n      console.error('打卡过程中发生错误:', error);\n      reject(new Error('打卡失败，请稍后重试'));\n    }\n  });\n};\n\n/**\n * 获取用户活动状态\n * @returns {Object} 用户活动状态对象\n */\nconst getUserActivityStatus = () => {\n  try {\n    const statusStr = uni.getStorageSync(USER_ACTIVITY_STATUS_KEY);\n    return statusStr ? JSON.parse(statusStr) : {};\n  } catch (e) {\n    console.error('获取用户活动状态失败', e);\n    return {};\n  }\n};\n\n/**\n * 保存用户活动状态\n * @param {Object} status 用户活动状态对象\n */\nconst saveUserActivityStatus = (status) => {\n  try {\n    uni.setStorageSync(USER_ACTIVITY_STATUS_KEY, JSON.stringify(status));\n  } catch (e) {\n    console.error('保存用户活动状态失败', e);\n  }\n}; "],"names":["uni","uniCloud","userActivityStatus","getCurrentUser"],"mappings":"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"}