{"version":3,"file":"login.js","sources":["services/login.js"],"sourcesContent":["// 登录服务\n\n/**\n * 微信小程序登录\n * @param {Object} data 登录参数\n * @param {string} data.code 登录凭证\n * @param {string} [data.encryptedData] 加密数据\n * @param {string} [data.iv] 加密算法参数\n * @returns {Promise} 登录结果Promise\n */\nexport const postLoginWxMin = (data) => {\n  return new Promise((resolve, reject) => {\n    uni.showLoading({ title: '登录中...' });\n    // 实际应该调用云函数，这里模拟\n    setTimeout(() => {\n      uni.hideLoading();\n      // 模拟登录成功\n      const result = {\n        account: 'wx_' + Math.random().toString(36).slice(-8),\n        avatar: '/static/images/avatars/avatar-user2.jpg',\n        id: 'current_user',\n        mobile: data.encryptedData ? '183****4964' : '', // 脱敏手机号\n        nickname: '绿色先锋',\n        token: 'token_' + Math.random().toString(36).slice(-16)\n      };\n      \n      // 保存登录状态和用户信息\n      uni.setStorageSync('login_status', 'loggedin');\n      uni.setStorageSync('user_token', result.token);\n      uni.setStorageSync('user_info', JSON.stringify(result));\n      \n      resolve(result);\n    }, 1000);\n  });\n};\n\n/**\n * 模拟登录（开发测试用）\n * @param {string} phoneNumber 手机号\n * @returns {Promise} 登录结果Promise\n */\nexport const postLoginSimple = (phoneNumber) => {\n  return new Promise((resolve, reject) => {\n    uni.showLoading({ title: '登录中...' });\n    \n    // 验证手机号\n    if (phoneNumber !== '18379364964') {\n      uni.hideLoading();\n      uni.showToast({ title: '请使用测试手机号登录', icon: 'none' });\n      reject(new Error('请使用测试手机号登录'));\n      return;\n    }\n    \n    // 模拟请求延时\n    setTimeout(() => {\n      uni.hideLoading();\n      // 用户信息\n      const result = {\n        account: 'Dawn99',\n        avatar: '/static/images/avatars/avatar-user2.jpg',\n        id: 'current_user',\n        mobile: '18379364964',\n        nickname: '绿色先锋',\n        token: 'token_' + Date.now()\n      };\n      \n      // 保存登录状态\n      uni.setStorageSync('login_status', 'loggedin');\n      uni.setStorageSync('user_token', result.token);\n      uni.setStorageSync('user_info', JSON.stringify(result));\n      \n      resolve(result);\n    }, 800);\n  });\n};\n\n/**\n * 检查登录状态\n * @returns {boolean} 是否已登录\n */\nexport const checkLoginStatus = () => {\n  const status = uni.getStorageSync('login_status');\n  const token = uni.getStorageSync('user_token');\n  return status === 'loggedin' && !!token;\n};\n\n/**\n * 获取当前登录用户\n * @returns {Object} 当前登录用户信息\n */\nexport const getCurrentUser = () => {\n  // 从缓存中获取用户信息\n  try {\n    // 首先尝试从profileUser获取\n    const profileUser = uni.getStorageSync('profileUser');\n    if (profileUser) {\n      try {\n        const user = typeof profileUser === 'string' ? JSON.parse(profileUser) : profileUser;\n        console.log('getCurrentUser: 从profileUser获取用户:', user);\n        return user;\n      } catch (e) {\n        console.error('解析profileUser失败:', e);\n      }\n    }\n    \n    // 然后尝试从userInfo获取\n    const userInfoStr = uni.getStorageSync('userInfo');\n    if (userInfoStr) {\n      try {\n        const user = JSON.parse(userInfoStr);\n        console.log('getCurrentUser: 从userInfo获取用户:', user);\n        return user;\n      } catch (e) {\n        console.error('解析userInfo失败:', e);\n      }\n    }\n    \n    // 最后尝试从user_info获取\n    const user_info = uni.getStorageSync('user_info');\n    if (user_info) {\n      try {\n        const user = typeof user_info === 'string' ? JSON.parse(user_info) : user_info;\n        console.log('getCurrentUser: 从user_info获取用户:', user);\n        return user;\n      } catch (e) {\n        console.error('解析user_info失败:', e);\n      }\n    }\n  } catch (e) {\n    console.error('获取用户信息失败', e);\n  }\n  \n  // 返回默认用户信息\n  const defaultUser = {\n    _id: '10086420',\n    id: '10086420',\n    nickname: '绿色先锋',\n    avatar: '/static/images/avatars/default-avatar.png',\n    level: 4\n  };\n  console.log('getCurrentUser: 返回默认用户:', defaultUser);\n  return defaultUser;\n};\n\n/**\n * 从profile页面获取用户信息（包含ID）\n * @returns {Object} 从profile页面获取的用户信息\n */\nexport const getCurrentUserFromProfile = () => {\n  try {\n    // 尝试多种可能的存储位置\n    let userInfo = null;\n    \n    // 1. 尝试获取用户信息从profile页面\n    const profileUser = uni.getStorageSync('profileUser');\n    if (profileUser) {\n      try {\n        userInfo = typeof profileUser === 'string' ? JSON.parse(profileUser) : profileUser;\n        console.log('getCurrentUserFromProfile: 从profileUser获取用户:', userInfo);\n        // 确保有_id字段\n        if (!userInfo._id && userInfo.id) {\n          userInfo._id = userInfo.id;\n        }\n        return userInfo;\n    } catch (e) {\n        console.error('解析profileUser失败:', e);\n    }\n  }\n  \n    // 2. 从userInfo获取\n    const localUserInfo = uni.getStorageSync('userInfo');\n    if (localUserInfo) {\n    try {\n        userInfo = typeof localUserInfo === 'string' ? JSON.parse(localUserInfo) : localUserInfo;\n        console.log('getCurrentUserFromProfile: 从userInfo获取用户:', userInfo);\n        // 确保有_id字段\n        if (!userInfo._id && userInfo.id) {\n          userInfo._id = userInfo.id;\n        }\n        return userInfo;\n      } catch (e) {\n        console.error('解析userInfo失败:', e);\n      }\n    }\n    \n    // 3. 从user_info获取\n    const userInfoStr = uni.getStorageSync('user_info');\n    if (userInfoStr) {\n      try {\n        userInfo = typeof userInfoStr === 'string' ? JSON.parse(userInfoStr) : userInfoStr;\n        console.log('getCurrentUserFromProfile: 从user_info获取用户:', userInfo);\n        // 确保有_id字段\n        if (!userInfo._id && userInfo.id) {\n          userInfo._id = userInfo.id;\n        }\n        return userInfo;\n      } catch (e) {\n        console.error('解析user_info失败:', e);\n      }\n    }\n    \n    // 4. 从member_info获取\n    const memberInfo = uni.getStorageSync('member_info');\n    if (memberInfo) {\n      try {\n        userInfo = typeof memberInfo === 'string' ? JSON.parse(memberInfo) : memberInfo;\n        console.log('getCurrentUserFromProfile: 从member_info获取用户:', userInfo);\n        // 确保有_id字段\n        if (!userInfo._id && userInfo.id) {\n          userInfo._id = userInfo.id;\n        }\n        return userInfo;\n    } catch (e) {\n        console.error('解析member_info失败:', e);\n    }\n  }\n  \n    // 如果没有找到用户信息，返回默认用户\n    const defaultUser = {\n      _id: '10086420',\n      id: '10086420',\n      nickname: '绿色先锋',\n      avatar: '/static/images/avatars/default-avatar.png',\n      level: 4,\n      points: 1000\n    };\n    console.log('getCurrentUserFromProfile: 返回默认用户:', defaultUser);\n    return defaultUser;\n  } catch (error) {\n    console.error('获取用户信息失败', error);\n    return {\n      _id: '10086420',\n      id: '10086420',\n      nickname: '绿色先锋',\n      avatar: '/static/images/avatars/default-avatar.png',\n      level: 4,\n      points: 1000\n    };\n  }\n};\n\n/**\n * 退出登录\n */\nexport const logout = () => {\n  uni.removeStorageSync('login_status');\n  uni.removeStorageSync('user_token');\n  uni.removeStorageSync('user_info');\n}; "],"names":["uni"],"mappings":"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"}