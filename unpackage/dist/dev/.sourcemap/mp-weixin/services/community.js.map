{"version":3,"file":"community.js","sources":["services/community.js"],"sourcesContent":["// 社区服务\nimport { getCurrentUser } from './login.js';\n\n/**\n * 获取帖子列表\n * @param {Object} options 查询参数\n * @returns {Promise} 帖子列表Promise\n */\nexport const getPosts = (options = {}) => {\n  return new Promise((resolve) => {\n    const { filter = 'recommend', page = 1, pageSize = 10 } = options;\n    \n    // 获取当前登录用户信息\n    const currentUser = getCurrentUser();\n    \n    // 从本地存储获取用户发布的帖子\n    let localPosts = [];\n    try {\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        localPosts = JSON.parse(cachedPosts);\n      }\n    } catch (e) {\n      console.error('获取本地帖子失败', e);\n    }\n    \n    // 获取交互数据\n    let postInteractions = {};\n    try {\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n      }\n    } catch (e) {\n      console.error('获取交互状态失败', e);\n    }\n    \n    // 为本地帖子添加当前用户信息和交互状态\n    localPosts = localPosts.map(post => {\n      // 确保所有由当前用户发表的帖子都使用最新的用户信息\n      if (post.userId === currentUser.id || post.isCurrentUser) {\n        post.userInfo = {\n          nickname: currentUser.nickname || '绿色先锋',\n          avatar: currentUser.avatar || '/static/images/avatars/avatar-user2.jpg',\n          location: post.userInfo?.location || '当前位置'\n        };\n        post.isCurrentUser = true;\n      }\n      \n      // 应用交互状态\n      if (postInteractions[post._id]) {\n        post.eyes = postInteractions[post._id].eyes || post.eyes;\n        post.likes = postInteractions[post._id].likes || post.likes;\n        post.comments = postInteractions[post._id].comments || post.comments;\n        post.isLiked = postInteractions[post._id].isLiked || false;\n        post.isCollected = postInteractions[post._id].isCollected || false;\n        post.isFollowed = postInteractions[post._id].isFollowed || false;\n      }\n      \n      return post;\n    });\n    \n    // 模拟数据，在实际应用中，这部分将被替换为API调用\n    const mockPosts = [{\n      _id: 'post1',\n      userId: 'user1',\n      userInfo: {\n        nickname: '绿色生活家',\n        avatar: '/static/images/avatars/avatar-user1.jpg',\n        location: '北京市'\n      },\n      content: '分享一个超实用的废旧纸盒改造方法，做成收纳盒不仅美观还环保！#创意改造 #废物利用',\n      images: [\n        '/static/images/userspost/recycle-before.jpeg',\n        '/static/images/userspost/recycle-after.jpeg'\n      ],\n      label: '创意改造,废物利用',\n      eyes: 356,\n      likes: 42,\n      comments: 18,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '2小时前',\n      timestamp: Date.now() - 2 * 60 * 60 * 1000\n    }, {\n      _id: 'post2',\n      userId: 'user2',\n      userInfo: {\n        nickname: '环保达人',\n        avatar: '/static/images/avatars/avatar-user2.jpg',\n        location: '上海市'\n      },\n      content: '今天参加了河道清洁活动，大家的环保意识越来越强了！三小时清理出这么多垃圾，希望下次不再有！#志愿活动 #环保行动',\n      images: [\n        '/static/images/userspost/river-cleanup.jpeg'\n      ],\n      label: '志愿活动,环保行动',\n      eyes: 209,\n      likes: 67,\n      comments: 24,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '昨天',\n      timestamp: Date.now() - 24 * 60 * 60 * 1000\n    }, {\n      _id: 'post3',\n      userId: 'user3',\n      userInfo: {\n        nickname: '低碳生活馆',\n        avatar: '/static/images/avatars/avatar-user3.jpg',\n        location: '广州市'\n      },\n      content: '【省水小窍门】洗菜水可以用来浇花，洗衣服最后一遍的清水可以用来拖地，这些循环用水的方法每月能省下不少水费！#节约用水 #生活技巧',\n      images: [\n        '/static/images/userspost/water-saving.jpeg'\n      ],\n      label: '节约用水,生活技巧',\n      eyes: 489,\n      likes: 93,\n      comments: 36,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '3天前',\n      timestamp: Date.now() - 3 * 24 * 60 * 60 * 1000\n    }];\n    \n    // 根据筛选参数返回不同的帖子\n    let resultPosts;\n    \n    if (filter === 'mine') {\n      // 仅返回当前用户的帖子\n      resultPosts = localPosts.filter(post => post.userId === currentUser.id);\n    } else {\n      // 将模拟数据和本地数据合并\n      resultPosts = [...localPosts, ...mockPosts];\n      \n      // 根据筛选条件过滤\n      switch (filter) {\n        case 'follow':\n          resultPosts = resultPosts.filter(post => post.isFollowed);\n          break;\n        case 'hot':\n          resultPosts.sort((a, b) => b.likes - a.likes);\n          break;\n        case 'latest':\n          resultPosts.sort((a, b) => {\n            if (a.timestamp && b.timestamp) {\n              return b.timestamp - a.timestamp;\n            }\n            return 0;\n          });\n          break;\n        default:\n          // recommend，默认排序\n          break;\n      }\n    }\n    \n    // 分页\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    const pagedPosts = resultPosts.slice(start, end);\n    \n    // 返回结果\n    setTimeout(() => {\n      resolve({\n        posts: pagedPosts,\n        total: resultPosts.length,\n        page,\n        pageSize\n      });\n    }, 300);\n  });\n};\n\n/**\n * 获取帖子详情\n * @param {string} postId 帖子ID\n * @returns {Promise} 帖子详情Promise\n */\nexport const getPostDetail = (postId) => {\n  return new Promise((resolve) => {\n    // 获取当前登录用户\n    const currentUser = getCurrentUser();\n    \n    // 从本地存储获取用户发布的帖子\n    let localPosts = [];\n    try {\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        localPosts = JSON.parse(cachedPosts);\n        const localPost = localPosts.find(p => p._id === postId);\n        if (localPost) {\n          // 找到本地帖子\n          // 更新用户信息 - 确保所有帖子都显示当前用户的信息\n          if (localPost.userId === currentUser.id || localPost.isCurrentUser) {\n            localPost.userInfo = {\n              nickname: currentUser.nickname || '绿色先锋',\n              avatar: currentUser.avatar || '/static/images/avatars/avatar-user2.jpg',\n              location: localPost.userInfo?.location || '当前位置'\n            };\n            localPost.isCurrentUser = true;\n          }\n          \n          // 增加浏览次数\n          localPost.eyes += 1;\n          \n          // 保存回本地存储\n          uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n          \n          // 保存交互数据\n          savePostInteraction(localPost);\n          \n          // 如果没有评论列表，添加空数组\n          if (!localPost.commentList) {\n            localPost.commentList = [];\n          }\n          \n          // 为每个评论设置当前用户信息\n          if (localPost.commentList && localPost.commentList.length > 0) {\n            localPost.commentList = localPost.commentList.map(comment => {\n              if (comment.userId === currentUser.id) {\n                comment.userInfo = {\n                  nickname: currentUser.nickname || '绿色先锋',\n                  avatar: currentUser.avatar || '/static/images/avatars/avatar-user2.jpg'\n                };\n              }\n              return comment;\n            });\n          }\n          \n          setTimeout(() => {\n            resolve(localPost);\n          }, 300);\n          return;\n        }\n      }\n    } catch (e) {\n      console.error('解析本地帖子失败', e);\n    }\n    \n    // 获取交互状态\n    let postInteractions = {};\n    try {\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n      }\n    } catch (e) {\n      console.error('获取交互状态失败', e);\n    }\n    \n    // 使用模拟数据\n    const mockPosts = [{\n      _id: 'post1',\n      userId: 'user1',\n      userInfo: {\n        nickname: '绿色生活家',\n        avatar: '/static/images/avatars/avatar-user1.jpg',\n        location: '北京市'\n      },\n      content: '分享一个超实用的废旧纸盒改造方法，做成收纳盒不仅美观还环保！#创意改造 #废物利用',\n      images: [\n        '/static/images/userspost/recycle-before.jpeg',\n        '/static/images/userspost/recycle-after.jpeg'\n      ],\n      label: '创意改造,废物利用',\n      eyes: 356,\n      likes: 42,\n      comments: 18,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '2小时前',\n      commentList: []\n    }, {\n      _id: 'post2',\n      userId: 'user2',\n      userInfo: {\n        nickname: '环保达人',\n        avatar: '/static/images/avatars/avatar-user2.jpg',\n        location: '上海市'\n      },\n      content: '今天参加了河道清洁活动，大家的环保意识越来越强了！三小时清理出这么多垃圾，希望下次不再有！#志愿活动 #环保行动',\n      images: [\n        '/static/images/userspost/river-cleanup.jpeg'\n      ],\n      label: '志愿活动,环保行动',\n      eyes: 209,\n      likes: 67,\n      comments: 24,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '昨天',\n      commentList: []\n    }, {\n      _id: 'post3',\n      userId: 'user3',\n      userInfo: {\n        nickname: '低碳生活馆',\n        avatar: '/static/images/avatars/avatar-user3.jpg',\n        location: '广州市'\n      },\n      content: '【省水小窍门】洗菜水可以用来浇花，洗衣服最后一遍的清水可以用来拖地，这些循环用水的方法每月能省下不少水费！#节约用水 #生活技巧',\n      images: [\n        '/static/images/userspost/water-saving.jpeg'\n      ],\n      label: '节约用水,生活技巧',\n      eyes: 489,\n      likes: 93,\n      comments: 36,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '3天前',\n      commentList: []\n    }];\n    \n    // 找到对应ID的帖子\n    const post = mockPosts.find(p => p._id === postId);\n    \n    if (post) {\n      // 应用交互状态\n      if (postInteractions[post._id]) {\n        post.eyes = postInteractions[post._id].eyes || post.eyes;\n        post.likes = postInteractions[post._id].likes || post.likes;\n        post.comments = postInteractions[post._id].comments || post.comments;\n        post.isLiked = postInteractions[post._id].isLiked || false;\n        post.isCollected = postInteractions[post._id].isCollected || false;\n        post.isFollowed = postInteractions[post._id].isFollowed || false;\n      }\n      \n      // 增加浏览次数\n      post.eyes += 1;\n      \n      // 保存交互数据\n      savePostInteraction(post);\n    }\n    \n    // 模拟延时\n    setTimeout(() => {\n      resolve(post || null);\n    }, 300);\n  });\n};\n\n/**\n * 保存帖子交互状态\n * @param {Object} post 帖子对象\n */\nconst savePostInteraction = (post) => {\n  if (!post || !post._id) return;\n  \n  try {\n    let postInteractions = {};\n    const cachedInteractions = uni.getStorageSync('post_interactions');\n    if (cachedInteractions) {\n      postInteractions = JSON.parse(cachedInteractions);\n    }\n    \n    postInteractions[post._id] = {\n      eyes: post.eyes,\n      likes: post.likes,\n      comments: post.comments,\n      isLiked: post.isLiked,\n      isCollected: post.isCollected,\n      isFollowed: post.isFollowed\n    };\n    \n    uni.setStorageSync('post_interactions', JSON.stringify(postInteractions));\n  } catch (e) {\n    console.error('保存交互状态失败', e);\n  }\n};\n\n/**\n * 发布帖子\n * @param {Object} postData 帖子数据\n * @param {string} postData.content 帖子内容\n * @param {Array} postData.images 图片数组\n * @param {string} postData.label 标签，多个标签用逗号分隔\n * @returns {Promise} 发布结果Promise\n */\nexport const createPost = (postData) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n    \n    const { content, images, label } = postData;\n    \n    // 校验内容\n    if (!content || content.trim() === '') {\n      reject(new Error('内容不能为空'));\n      return;\n    }\n    \n    // 显示加载状态\n    uni.showLoading({ title: '发布中...' });\n    \n    setTimeout(() => {\n      uni.hideLoading();\n      \n      const timestamp = Date.now();\n      const newPost = {\n        _id: 'post_' + timestamp,\n        userId: user.id,\n        userInfo: {\n          nickname: user.nickname || '绿色先锋',\n          avatar: user.avatar || '/static/images/avatars/avatar-user2.jpg',\n          location: '当前位置' // 实际应用中可从定位获取\n        },\n        content,\n        images: images || [],\n        label: label || '',\n        eyes: 0,\n        likes: 0,\n        comments: 0,\n        isFollowed: false,\n        isLiked: false,\n        isCollected: false,\n        isCurrentUser: true, // 标记为当前用户的帖子\n        createdAt: '刚刚',\n        timestamp: timestamp,\n        commentList: []\n      };\n      \n      // 保存到本地缓存，模拟数据持久化\n      try {\n        let localPosts = [];\n        const cachedPosts = uni.getStorageSync('local_posts');\n        if (cachedPosts) {\n          localPosts = JSON.parse(cachedPosts);\n        }\n        localPosts.unshift(newPost); // 添加到数组开头\n        uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n      } catch (e) {\n        console.error('保存帖子失败', e);\n      }\n      \n      resolve(newPost);\n    }, 1000);\n  });\n};\n\n/**\n * 点赞/取消点赞帖子\n * @param {string} postId 帖子ID\n * @param {boolean} isLike 是否点赞，false为取消点赞\n * @returns {Promise} 操作结果Promise\n */\nexport const likePost = (postId, isLike) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n    \n    // 更新本地存储中的帖子数据\n    try {\n      // 更新交互状态\n      let postInteractions = {};\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n      }\n      \n      if (!postInteractions[postId]) {\n        postInteractions[postId] = { likes: 0, isLiked: false };\n      }\n      \n      // 更新点赞状态和数量\n      if (isLike && !postInteractions[postId].isLiked) {\n        postInteractions[postId].likes = (postInteractions[postId].likes || 0) + 1;\n        postInteractions[postId].isLiked = true;\n      } else if (!isLike && postInteractions[postId].isLiked) {\n        postInteractions[postId].likes = Math.max(0, (postInteractions[postId].likes || 0) - 1);\n        postInteractions[postId].isLiked = false;\n      }\n      \n      // 保存交互状态\n      uni.setStorageSync('post_interactions', JSON.stringify(postInteractions));\n      \n      // 更新本地帖子数据\n      let localPosts = [];\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        localPosts = JSON.parse(cachedPosts);\n        const postIndex = localPosts.findIndex(post => post._id === postId);\n        if (postIndex !== -1) {\n          localPosts[postIndex].likes = postInteractions[postId].likes;\n          localPosts[postIndex].isLiked = postInteractions[postId].isLiked;\n          uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n        }\n      }\n    } catch (e) {\n      console.error('更新点赞状态失败', e);\n    }\n    \n    // 在真实环境中，这里应该调用云函数更新点赞状态\n    setTimeout(() => {\n      resolve({\n        success: true,\n        isLike\n      });\n    }, 300);\n  });\n};\n\n/**\n * 收藏/取消收藏帖子\n * @param {string} postId 帖子ID\n * @param {boolean} isCollect 是否收藏，false为取消收藏\n * @returns {Promise} 操作结果Promise\n */\nexport const collectPost = (postId, isCollect) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n    \n    // 更新本地存储中的帖子数据\n    try {\n      // 更新交互状态\n      let postInteractions = {};\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n      }\n      \n      if (!postInteractions[postId]) {\n        postInteractions[postId] = { isCollected: false };\n      }\n      \n      // 更新收藏状态\n      postInteractions[postId].isCollected = isCollect;\n      \n      // 保存交互状态\n      uni.setStorageSync('post_interactions', JSON.stringify(postInteractions));\n      \n      // 更新本地帖子数据\n      let localPosts = [];\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        localPosts = JSON.parse(cachedPosts);\n        const postIndex = localPosts.findIndex(post => post._id === postId);\n        if (postIndex !== -1) {\n          localPosts[postIndex].isCollected = isCollect;\n          uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n        }\n      }\n    } catch (e) {\n      console.error('更新收藏状态失败', e);\n    }\n    \n    // 在真实环境中，这里应该调用云函数更新收藏状态\n    setTimeout(() => {\n      resolve({\n        success: true,\n        isCollect\n      });\n    }, 300);\n  });\n};\n\n/**\n * 关注/取消关注用户\n * @param {string} userId 要关注的用户ID\n * @param {boolean} isFollow 是否关注，false为取消关注\n * @returns {Promise} 操作结果Promise\n */\nexport const followUser = (userId, isFollow) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n    \n    // 更新与该用户相关的所有帖子的关注状态\n    try {\n      // 获取本地帖子\n      let localPosts = [];\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        localPosts = JSON.parse(cachedPosts);\n        \n        // 更新所有该用户的帖子\n        let updated = false;\n        localPosts.forEach(post => {\n          if (post.userId === userId) {\n            post.isFollowed = isFollow;\n            updated = true;\n          }\n        });\n        \n        if (updated) {\n          uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n        }\n      }\n      \n      // 更新交互状态\n      let postInteractions = {};\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n        \n        // 遍历所有交互，更新关注状态\n        let interactionsUpdated = false;\n        for (const postId in postInteractions) {\n          // 我们需要知道每个帖子的作者是谁\n          // 这里假设我们有一个映射关系，实际中可能需要另外存储\n          let postIndex = localPosts.findIndex(post => post._id === postId);\n          if (postIndex !== -1 && localPosts[postIndex].userId === userId) {\n            if (!postInteractions[postId]) {\n              postInteractions[postId] = {};\n            }\n            postInteractions[postId].isFollowed = isFollow;\n            interactionsUpdated = true;\n          }\n        }\n        \n        if (interactionsUpdated) {\n          uni.setStorageSync('post_interactions', JSON.stringify(postInteractions));\n        }\n      }\n    } catch (e) {\n      console.error('更新关注状态失败', e);\n    }\n    \n    // 在真实环境中，这里应该调用云函数更新关注状态\n    setTimeout(() => {\n      resolve({\n        success: true,\n        isFollow\n      });\n    }, 300);\n  });\n};\n\n/**\n * 发表评论\n * @param {Object} commentData 评论数据\n * @param {string} commentData.postId 帖子ID\n * @param {string} commentData.content 评论内容\n * @param {Object} [commentData.replyTo] 回复的评论\n * @returns {Promise} 评论结果Promise\n */\nexport const createComment = (commentData) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n    \n    const { postId, content, replyTo } = commentData;\n    \n    // 校验内容\n    if (!content || content.trim() === '') {\n      reject(new Error('评论内容不能为空'));\n      return;\n    }\n    \n    // 校验帖子ID\n    if (!postId) {\n      reject(new Error('缺少帖子ID'));\n      return;\n    }\n    \n    uni.showLoading({ title: '提交中...' });\n    \n    setTimeout(() => {\n      uni.hideLoading();\n      \n      // 创建评论对象\n      const timestamp = Date.now();\n      const newComment = {\n        _id: 'comment_' + timestamp,\n        postId: postId,\n        userId: user.id,\n        userInfo: {\n          nickname: user.nickname || '绿色先锋',\n          avatar: user.avatar || '/static/images/avatars/avatar-user2.jpg'\n        },\n        content: content,\n        createdAt: '刚刚',\n        timestamp: timestamp,\n        likes: 0,\n        isLiked: false\n      };\n      \n      // 如果是回复其他评论\n      if (replyTo) {\n        newComment.replyTo = {\n          commentId: replyTo.commentId,\n          userId: replyTo.userId,\n          nickname: replyTo.nickname\n        };\n      }\n      \n      // 获取本地帖子\n      try {\n        let localPosts = [];\n        const cachedPosts = uni.getStorageSync('local_posts');\n        if (cachedPosts) {\n          localPosts = JSON.parse(cachedPosts);\n          \n          // 找到对应的帖子\n          const postIndex = localPosts.findIndex(post => post._id === postId);\n          if (postIndex !== -1) {\n            // 确保commentList数组存在\n            if (!localPosts[postIndex].commentList) {\n              localPosts[postIndex].commentList = [];\n            }\n            \n            // 添加评论\n            localPosts[postIndex].commentList.push(newComment);\n            \n            // 更新评论数\n            localPosts[postIndex].comments += 1;\n            \n            // 保存回本地存储\n            uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n            \n            // 保存交互数据\n            savePostInteraction(localPosts[postIndex]);\n            \n            resolve(newComment);\n            return;\n          }\n        }\n      } catch (e) {\n        console.error('保存评论失败', e);\n      }\n      \n      // 如果找不到本地帖子，创建临时评论\n      resolve(newComment);\n    }, 500);\n  });\n};\n\n/**\n * 删除帖子\n * @param {string} postId 要删除的帖子ID\n * @returns {Promise} 删除结果Promise\n */\nexport const deletePost = (postId) => {\n  return new Promise((resolve, reject) => {\n    // 获取用户信息\n    const user = getCurrentUser();\n    if (!user) {\n      reject(new Error('用户未登录'));\n      return;\n    }\n\n    uni.showLoading({ title: '删除中...' });\n    \n    // 模拟网络延迟\n    setTimeout(() => {\n      try {\n        // 从本地存储获取帖子列表\n        let localPosts = [];\n        const cachedPosts = uni.getStorageSync('local_posts');\n        if (cachedPosts) {\n          localPosts = JSON.parse(cachedPosts);\n          \n          // 找到对应帖子的索引\n          const postIndex = localPosts.findIndex(post => post._id === postId);\n          \n          // 检查帖子是否存在\n          if (postIndex === -1) {\n            uni.hideLoading();\n            reject(new Error('帖子不存在'));\n            return;\n          }\n          \n          const post = localPosts[postIndex];\n          // 检查是否是用户自己的帖子或当前用户的帖子\n          // 1. 比较用户ID\n          // 2. 或检查isCurrentUser标记\n          if (post.userId !== user.id && !post.isCurrentUser) {\n            uni.hideLoading();\n            reject(new Error('无权限删除此帖子'));\n            return;\n          }\n          \n          // 删除帖子\n          localPosts.splice(postIndex, 1);\n          \n          // 保存回本地存储\n          uni.setStorageSync('local_posts', JSON.stringify(localPosts));\n          \n          // 删除交互数据\n          try {\n            const cachedInteractions = uni.getStorageSync('post_interactions');\n            if (cachedInteractions) {\n              const postInteractions = JSON.parse(cachedInteractions);\n              if (postInteractions[postId]) {\n                delete postInteractions[postId];\n                uni.setStorageSync('post_interactions', JSON.stringify(postInteractions));\n              }\n            }\n          } catch (e) {\n            console.error('删除交互数据失败', e);\n          }\n          \n          uni.hideLoading();\n          resolve({ success: true, message: '帖子删除成功' });\n        } else {\n          uni.hideLoading();\n          reject(new Error('没有找到帖子数据'));\n        }\n      } catch (e) {\n        uni.hideLoading();\n        console.error('删除帖子失败', e);\n        reject(new Error('删除帖子失败'));\n      }\n    }, 800);\n  });\n};\n\n/**\n * 搜索帖子\n * @param {string} query 搜索关键词\n * @param {Object} options 搜索选项\n * @param {number} options.page 页码，默认1\n * @param {number} options.pageSize 每页数量，默认10\n * @returns {Promise} 搜索结果Promise\n */\nexport const searchPosts = (query, options = {}) => {\n  return new Promise((resolve) => {\n    const { page = 1, pageSize = 10 } = options;\n    \n    // 如果搜索关键词为空，返回空结果\n    if (!query || query.trim() === '') {\n      resolve({\n        posts: [],\n        total: 0,\n        page,\n        pageSize\n      });\n      return;\n    }\n    \n    // 获取当前用户信息\n    const currentUser = getCurrentUser();\n    \n    // 获取所有帖子（本地存储 + 模拟数据）\n    let allPosts = [];\n    \n    // 从本地存储获取帖子\n    try {\n      const cachedPosts = uni.getStorageSync('local_posts');\n      if (cachedPosts) {\n        allPosts = JSON.parse(cachedPosts);\n      }\n    } catch (e) {\n      console.error('获取本地帖子失败', e);\n    }\n    \n    // 添加模拟数据\n    const mockPosts = [{\n      _id: 'post1',\n      userId: 'user1',\n      userInfo: {\n        nickname: '绿色生活家',\n        avatar: '/static/images/avatars/avatar-user1.jpg',\n        location: '北京市'\n      },\n      content: '分享一个超实用的废旧纸盒改造方法，做成收纳盒不仅美观还环保！#创意改造 #废物利用',\n      images: [\n        '/static/images/userspost/recycle-before.jpeg',\n        '/static/images/userspost/recycle-after.jpeg'\n      ],\n      label: '创意改造,废物利用',\n      eyes: 356,\n      likes: 42,\n      comments: 18,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '2小时前',\n      timestamp: Date.now() - 2 * 60 * 60 * 1000\n    }, {\n      _id: 'post2',\n      userId: 'user2',\n      userInfo: {\n        nickname: '环保达人',\n        avatar: '/static/images/avatars/avatar-user2.jpg',\n        location: '上海市'\n      },\n      content: '今天参加了河道清洁活动，大家的环保意识越来越强了！三小时清理出这么多垃圾，希望下次不再有！#志愿活动 #环保行动',\n      images: [\n        '/static/images/userspost/river-cleanup.jpeg'\n      ],\n      label: '志愿活动,环保行动',\n      eyes: 209,\n      likes: 67,\n      comments: 24,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '昨天',\n      timestamp: Date.now() - 24 * 60 * 60 * 1000\n    }, {\n      _id: 'post3',\n      userId: 'user3',\n      userInfo: {\n        nickname: '低碳生活馆',\n        avatar: '/static/images/avatars/avatar-user3.jpg',\n        location: '广州市'\n      },\n      content: '【省水小窍门】洗菜水可以用来浇花，洗衣服最后一遍的清水可以用来拖地，这些循环用水的方法每月能省下不少水费！#节约用水 #生活技巧',\n      images: [\n        '/static/images/userspost/water-saving.jpeg'\n      ],\n      label: '节约用水,生活技巧',\n      eyes: 489,\n      likes: 93,\n      comments: 36,\n      isFollowed: false,\n      isLiked: false,\n      isCollected: false,\n      createdAt: '3天前',\n      timestamp: Date.now() - 3 * 24 * 60 * 60 * 1000\n    }];\n    \n    // 合并数据\n    allPosts = [...allPosts, ...mockPosts];\n    \n    // 获取交互数据\n    let postInteractions = {};\n    try {\n      const cachedInteractions = uni.getStorageSync('post_interactions');\n      if (cachedInteractions) {\n        postInteractions = JSON.parse(cachedInteractions);\n      }\n    } catch (e) {\n      console.error('获取交互状态失败', e);\n    }\n    \n    // 模糊搜索逻辑\n    const searchQuery = query.toLowerCase().trim();\n    const matchedPosts = allPosts.filter(post => {\n      // 搜索内容\n      const contentMatch = post.content && post.content.toLowerCase().includes(searchQuery);\n      \n      // 搜索标签\n      const labelMatch = post.label && post.label.toLowerCase().includes(searchQuery);\n      \n      // 内容或标签匹配即返回true\n      return contentMatch || labelMatch;\n    });\n    \n    // 应用交互状态和当前用户信息\n    const resultPosts = matchedPosts.map(post => {\n      // 确保所有由当前用户发表的帖子都使用最新的用户信息\n      if (post.userId === currentUser.id || post.isCurrentUser) {\n        post.userInfo = {\n          nickname: currentUser.nickname || '绿色先锋',\n          avatar: currentUser.avatar || '/static/images/avatars/avatar-user2.jpg',\n          location: post.userInfo?.location || '当前位置'\n        };\n        post.isCurrentUser = true;\n      }\n      \n      // 应用交互状态\n      if (postInteractions[post._id]) {\n        post.eyes = postInteractions[post._id].eyes || post.eyes;\n        post.likes = postInteractions[post._id].likes || post.likes;\n        post.comments = postInteractions[post._id].comments || post.comments;\n        post.isLiked = postInteractions[post._id].isLiked || false;\n        post.isCollected = postInteractions[post._id].isCollected || false;\n        post.isFollowed = postInteractions[post._id].isFollowed || false;\n      }\n      \n      return post;\n    });\n    \n    // 按相关性排序（包含在内容中的优先于标签中的）\n    resultPosts.sort((a, b) => {\n      const aContentMatch = a.content && a.content.toLowerCase().includes(searchQuery);\n      const bContentMatch = b.content && b.content.toLowerCase().includes(searchQuery);\n      \n      if (aContentMatch && !bContentMatch) return -1;\n      if (!aContentMatch && bContentMatch) return 1;\n      \n      // 如果内容匹配情况一样，按时间降序\n      return (b.timestamp || 0) - (a.timestamp || 0);\n    });\n    \n    // 分页\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    const pagedPosts = resultPosts.slice(start, end);\n    \n    // 返回结果\n    setTimeout(() => {\n      resolve({\n        posts: pagedPosts,\n        total: resultPosts.length,\n        page,\n        pageSize,\n        query\n      });\n    }, 300);\n  });\n}; "],"names":["getCurrentUser","uni","post"],"mappings":"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"}